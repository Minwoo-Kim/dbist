#summary Manual

<wiki:toc max_depth="3" />

= Features =

== ORM ==

== SQL Query ==

= Configurations =

|| *Name* || *Description* ||
|| dmlJdbc.domain || Owner of oracle, Database Name of sqlserver, Table Schema of mysql ||
|| dataSource.driverClassName || JDBC driver class name ||
|| dataSource.url || JDBC URL ||
|| dataSource.username || Database username ||
|| dataSource.password  || Database password ||
|| sqlAspect.enabled || Print SQL query at log ||
|| sqlAspect.prettyPrint || Print prettily formatted SQL query at log ||

= How to CRUD =

== How to Select Data ==

=== Select a Data ===

If the "DATA" table has a primary key

{{{
SELECT * FROM DATA WHERE id = 'x'
}}}

{{{
Data data = dml.select(Data.class, "x");
}}}

If the "DATA" table has composite keys and the field names are 'pk1' and 'pk2'

{{{
SELECT * FROM DATA WHERE pk1 = 'x' and pk2 = 'y'
}}}

{{{
// By Array
Data data = dml.select(Data.class, "x", "y");

// By List
List<Object> id = new ArrayList<Object>();
id.add("x");
id.add("y");
Data data = dml.select(Data.class, id);

// By HttpServletRequest parameters (parameters must have values of 'pk1', 'pk2')
Data data = dml.select(Data.class, request);

// By Map
Map<String, Object> paramMap = new HashMap<String, Object>();
paramMap.put("pk1", "x");
paramMap.put("pk2", "y");
Data data = dml.select(Data.class, paramMap);

// By the object
Data data = new Data();
data.setPk1("x");
data.setPk2("y");
data = dml.select(data);

// By another object
OtherData otherData = new OtherData();
otherData.setPk1("x");
otherData.setPk2("y");
Data data = dml.select(Data.class, otherData);

// By Query object
Query query = new Query().addFilter("pk1", "x");
Query query = new Query().addFilter("pk2", "y");
Data data = dml.select(Data.class, query);
}}}

If the "DATA" table has candidate keys and the field names are 'ck1' and 'ck2'

{{{
SELECT * FROM DATA WHERE ck1 = 'x' and ck2 = 'y'
}}}

{{{
// By HttpServletRequest parameters (parameters must have values of 'ck1', 'ck2')
Data data = dml.selectByCondition(Data.class, request);

// By Map
Map<String, Object> paramMap = new HashMap<String, Object>();
paramMap.put("pk1", "x");
paramMap.put("pk2", "y");
Data data = dml.selectByCondition(Data.class, paramMap);

// By the object
Data data = new Data();
data.setCk1("l");
data.setCk2("m");
data = dml.selectByCondition(Data.class, data);

// By another object
OtherData otherData = new OtherData();
otherData.setCk1("x");
otherData.setCk2("y");
Data data = dml.select(Data.class, otherData);

// By Query object
Query query = new Query().addFilter("ck1", "x");
Query query = new Query().addFilter("ck2", "y");
Data data = dml.select(Data.class, query);
}}}

=== Select Data List ===

== How to Insert Data ==

=== Insert a Data ===

=== Insert Data List ===

== How to Update Data ==

=== Update a Data ===

=== Insert Data List ===

== How to Delete Data ==

=== Delete a Data ===

=== Delete Data List ===

== How to use Query Class ==

=== Field ===

=== Filter ===

=== Filters ===

=== Order By ===

=== Group By ===

=== Pagination ===

= How to execute SQL Query =

== Select Data by SQL String ==

== Select Data by SQL Path ==

= Annotation =

== Table ==

== Column ==

== Ignore ==

= Aspect =

== SQL Aspect ==

= DML =

== JDBC ==

== Hibernate ==

== JPA ==

== JDO ==