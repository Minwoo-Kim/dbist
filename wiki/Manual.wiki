#summary Manual

<wiki:toc max_depth="3" />

= Features =

== ORM ==

== SQL Query ==

= Configurations =

  * config.properties

|| *Name* || *Description* ||
|| applicationContext.name || Context Path of your Webapp (default 'dbist') ||
|| dmlJdbc.domain || Owner of oracle, Database Name of sqlserver, Table Schema of mysql ||
|| dataSource.driverClassName || JDBC driver class name ||
|| dataSource.url || JDBC URL ||
|| dataSource.username || Database username ||
|| dataSource.password  || Database password ||
|| sqlAspect.enabled || Print SQL query at log ||
|| sqlAspect.prettyPrint || Print prettily formatted SQL query at log ||

  * beans.xml (springframework)

{{{
	<context:property-placeholder location="/WEB-INF/*.properties" />

	<bean class="net.sf.common.util.BeanUtils">
		<property name="applicationContextName" value="${applicationContext.name}" />
	</bean>

	<!-- AOP -->
	<aop:config>
		<aop:aspect order="2" ref="sqlAspect">
			<aop:around method="print" pointcut="execution(* org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.*(..))" />
		</aop:aspect>
	</aop:config>
	<bean id="sqlAspect" class="org.dbist.aspect.SqlAspect">
		<property name="enabled" value="${sqlAspect.enabled}" />
		<property name="prettyPrint" value="${sqlAspect.prettyPrint}" />
	</bean>

	<!-- JDBC -->
	<bean id="dmlJdbc" class="org.dbist.dml.impl.DmlJdbc">
		<property name="domain" value="${dmlJdbc.domain}" />
		<property name="preprocessor">
			<bean class="org.dbist.processor.impl.VelocityPreprocessor" />
		</property>
		<property name="dataSource" ref="dataSourceJdbc" />
		<property name="jdbcOperations" ref="jdbcOperations" />
		<property name="namedParameterJdbcOperations" ref="namedParameterJdbcOperations" />
	</bean>
	<bean id="jdbcOperations" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSourceJdbc" />
	</bean>
	<bean id="namedParameterJdbcOperations" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg name="dataSource" index="0" ref="dataSourceJdbc" />
	</bean>
	<bean id="dataSourceJdbc" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${dataSource.driverClassName}" />
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
	</bean>
}}}

= How to CRUD =

== How to Select Data ==

=== Select a Data ===

If the "DATA" table has a primary key

{{{
SELECT * FROM DATA WHERE id = 'x'
}}}

{{{
Data data = dml.select(Data.class, "x");
}}}

If the "DATA" table has composite keys and the field names are 'pk1' and 'pk2'

{{{
SELECT * FROM DATA WHERE pk1 = 'x' and pk2 = 'y'
}}}

{{{
// By Array
Data data = dml.select(Data.class, "x", "y");

// By List
List<Object> id = new ArrayList<Object>();
id.add("x");
id.add("y");
Data data = dml.select(Data.class, id);

// By HttpServletRequest parameters (parameters must have values of 'pk1', 'pk2')
Data data = dml.select(Data.class, request);

// By Map
Map<String, Object> paramMap = new HashMap<String, Object>();
paramMap.put("pk1", "x");
paramMap.put("pk2", "y");
Data data = dml.select(Data.class, paramMap);

// By the object
Data data = new Data();
data.setPk1("x");
data.setPk2("y");
data = dml.select(data);

// By another object
OtherData otherData = new OtherData();
otherData.setPk1("x");
otherData.setPk2("y");
Data data = dml.select(Data.class, otherData);

// By Query object
Query query = new Query();
query.addFilter("pk1", "x").addFilter("pk2", "y");
Data data = dml.select(Data.class, query);
}}}

If the "DATA" table has candidate keys and the field names are 'ck1' and 'ck2'

{{{
SELECT * FROM DATA WHERE ck1 = 'x' and ck2 = 'y'
}}}

{{{
// By HttpServletRequest parameters (parameters must have values of 'ck1', 'ck2')
Data data = dml.selectByCondition(Data.class, request);

// By Map
Map<String, Object> paramMap = new HashMap<String, Object>();
paramMap.put("pk1", "x");
paramMap.put("pk2", "y");
Data data = dml.selectByCondition(Data.class, paramMap);

// By the object
Data data = new Data();
data.setCk1("l");
data.setCk2("m");
data = dml.selectByCondition(Data.class, data);

// By another object
OtherData otherData = new OtherData();
otherData.setCk1("x");
otherData.setCk2("y");
Data data = dml.select(Data.class, otherData);

// By Query object
Query query = new Query();
query.addFilter("ck1", "x").addFilter("ck2", "y");
Data data = dml.select(Data.class, query);
}}}

=== Select Data List ===

=== Select Data Size(Count) ==

== How to Insert Data ==

=== Insert a Data ===

=== Insert Data List ===

== How to Update Data ==

=== Update a Data ===

=== Insert Data List ===

== How to Delete Data ==

=== Delete a Data ===

=== Delete Data List ===

== How to use Query Class ==

=== Field ===

{{{
selecdt a, b from DATA
}}}

{{{
List<Data> list = dml.selectList(Data.class, new Query().addField("a", "b"));

or

Query query = new Query();
query.addField("a", "b");
List<Data> list = dml.selectList(Data.class, query);
}}}

=== Filter ===

=== Filters ===

=== Order By ===

{{{
select * from DATA order by a asc, b desc
}}}

{{{
List<Data> list = dml.selectList(Data.class, new Query().addOrder("a", true).addOrder("b", false));

or

Query query = new Query();
query.addOrder("a", true);
query.addOrder("b", false);
List<Data> list = dml.selectList(Data.class, query);
}}}

=== Group By ===

{{{
select a, b from DATA group by a, b
}}}

{{{
List<Data> list = dml.selectList(Data.class, new Query().addGroup("a", "b"));

or

Query query = new Query();
query.addGroup("a", "b");
List<Data> list = dml.selectList(Data.class, query);
}}}

=== Pagination ===

  * Page 1

{{{
// oracle
select * from (select * from DATA) where rownum <= 10

// sqlserver
select top 10 * from DATA

// mysql
select * from DATA limit 10

}}}

{{{
List<Data> list = dml.selectList(Data.class, new Query(0, 10));

or

Query query = new Query();
query.setPageIndex(0);
query.setPageSize(10);
List<Data> list = dml.selectList(Data.class, query);
}}}

  * Page 2

{{{
// oracle
select * from (
    select data.*, rownum rownum_ from (
        select * from DATA
    ) 
    data where rownum <= 10
) where rownum_ > 0

// sqlserver
select top 20 * from DATA

// mysql
select * from DATA limit 10 : 10
}}}

{{{
List<Data> list = dml.selectList(Data.class, new Query(1, 10));

or

Query query = new Query();
query.setPageIndex(1);
query.setPageSize(10);
List<Data> list = dml.selectList(Data.class, query);
}}}

= How to execute SQL Query =

== Select Data by SQL String ==

== Select Data by SQL Path ==

  * SQL file content

{{{
select * from DATA
}}}

=== By SQL Filepath or Classpath ===

  * org/dbist/sample/sql/select_data.sql

{{{
// Map List
List<Map> list = selectListBySqlPath("org/dbist/sample/sql/select_data.sql", null, Map.class, 0, 0);

// Data List
List<Data> list = selectListBySqlPath("org/dbist/sample/sql/select_data.sql", null, Data.class, 0, 0);
}}}

=== By SQL Directory Path or Package Path ===

  * org/dbist/sample/sql/select_data
    * ansi.sql (default)
    * oracle.sql
    * sqlserver.sql
    * mysql.sql

{{{
// Map List
List<Map> list = selectListBySqlPath("org/dbist/sample/sql/select_data", null, Map.class, 0, 0);

// Data List
List<Data> list = selectListBySqlPath("org/dbist/sample/sql/select_data", null, Data.class, 0, 0);
}}}

=== Preprocessor ===

==== Velocity Preprocessor ====

= Annotation =

== Table ==

== Column ==

== Ignore ==

= Aspect =

== SQL Aspect ==

= DML =

== JDBC ==

== Hibernate ==

== JPA ==

== JDO ==